# This file is autogenerated by maturin v1.6.0 and then modified
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          before-script-linux: |
            yum install openssl-devel -y
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64
          - aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
      - name: install the wheel
        run: |
          pip install target/wheels/*.whl
      - name: install test deps
        run: |
          pip install pytest pytest-asyncio
      - name: Run tests
        run: |
          pytest tests/tests.py
        env:
          KITTYCAD_API_TOKEN: ${{ secrets.KITTYCAD_API_TOKEN }}

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
      - name: Install codespell
        run: |
            uv venv .venv
            echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
            echo "$PWD/.venv/bin" >> $GITHUB_PATH
            uv pip install pip --upgrade
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    needs: [linux-x86_64, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
      - name: Install codespell
        run: |
            uv venv .venv
            echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
            echo "$PWD/.venv/bin" >> $GITHUB_PATH
            uv pip install pip --upgrade
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - name: Get if prerelease
        shell: bash
        id: extract_prerelease
        run: |
          if cat VERSION.txt | grep -q "rc"; then
            echo "##[set-output name=prerelease;]$(echo true)"
          else
            echo "##[set-output name=prerelease;]$(echo false)"
          fi
      - name: Create a Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{steps.extract_prerelease.outputs.prerelease}}
